/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import drogheria.Drogheria;
import java.util.Random;

/**
 *
 * @author Piergiorgio
 */
public class Server extends javax.swing.JFrame {

    static String messaggio = ""; //stringa che contiene tutto il messaggio visualizzato in chat

    public Server() {
        super("Drogheria da Piero S.p.a");
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextPane();
        esci = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(439, 545));
        setResizable(false);
        setSize(new java.awt.Dimension(439, 545));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Drogheria da Piero");
        jLabel1.setPreferredSize(new java.awt.Dimension(439, 545));

        chat.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        jScrollPane1.setViewportView(chat);

        esci.setText("Esci");
        esci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esciActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(esci)))
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 363, Short.MAX_VALUE)
                .addComponent(esci)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(71, 71, 71)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(46, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void esciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esciActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_esciActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
        try {
            System.out.println("Il server è stato lanciato.");
            int clientNumber = 0;
            ServerSocket listener = new ServerSocket(1234);
            try {
                while (true) {
                    // crea il thread e lo lancia
                    new Capitalizer(listener.accept(), clientNumber++).start();
                }
            } finally {
                listener.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected static javax.swing.JTextPane chat;
    private javax.swing.JButton esci;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private static class Capitalizer extends Thread {

        private Socket socket;
        private int clientNumber; //numero del cliente
        Drogheria d;
        int i = 0;
        Random r;
        String mex;
        boolean next;

        public Capitalizer(Socket socket, int clientNumber) {
            this.socket = socket;
            this.clientNumber = clientNumber;
            d = new Drogheria();
            r = new Random();
            myLog("Nuova connessione con il client " + clientNumber + " alla porta " + socket.getPort() + "\n");
        }

        public void run() {
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                myLog("Entrato cliente n° " + clientNumber + "\n");
                //continuo a comunicare con un clent finchè 
                //non arrivo all' ultimo stato della macchina
                System.out.println(d.messaggi.size());
                next = false;
                while (i != d.messaggi.size()) {
                    System.out.println(i);
                    String input = in.readLine();
                    myLog("[Client " + clientNumber + " ] " + input + "\n");
                    if (i == 2) {
                        i = d.bustaOFresca(input);
                        if (i == 2)next =  true;
                    } else if (i == 5) {
                        i = d.ripeti(input);
                    }
                    System.out.println(i);
                    mex = d.messaggi.get(i)[r.nextInt(d.messaggi.get(i).length)];
                    out.println(mex);
                    myLog("[Server] " + mex + "\n");
                    i++;
                    if(next){
                        i++;
                     next = false;
                    }
                }
                myLog("Fine connessione con il client " + clientNumber + "\n");
                socket.close();
            } catch (IOException e) {
                myLog("Errore nell'handling del client  " + clientNumber + ": " + e + "\n");
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    myLog("Non riesco a chiudere il socket \n");
                }
                myLog("Connessione con il client " + clientNumber + " chiusa \n");
            }
        }

        /**
         * @brief procedura che aggiunge un messaggio alla chat e aggiorna
         * l'interfaccia grafica
         * @param message messaggio da aggiungere alla serie di messaggi
         */
        private void myLog(String message) {
            messaggio += message;
            chat.setText(messaggio);
        }
    }

}
