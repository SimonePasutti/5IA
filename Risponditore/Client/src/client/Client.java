/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.awt.Image;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author Musone Mattia
 * @param firstTime è un boolean che se TRUE assegna ad una label il nome utente digitato se FALSE impedisce la sccrittura su codesta label
 * @param testo è una JTextArea in un JScrollPanel che contiene la chat col Server
 * @param stato è una label che indica lo stato della connessione
 */

public class Client extends JFrame {

    private static ObjectOutputStream out;
    private static Socket s;
    private static ObjectInputStream input;
    private static boolean firstTime;

    public Client() {
        initComponents();
        firstTime = true;
        String serverAddress = "localhost";
        try {
            s = new Socket(serverAddress, 9090);
            out = new ObjectOutputStream(s.getOutputStream());
            input = new ObjectInputStream(s.getInputStream());
            stato.setText("Connesso");
        } catch (Exception e) {
            testo.append("Impossibile comunicare con il server\n");
            stato.setText("Disconnesso\n");
        }
        ImageIcon MyImage = new ImageIcon("ristorante.png");
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(immagine.getWidth(), immagine.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        immagine.setIcon(image);
        testo.setLineWrap(true);
        getStream();
    }
/**
 * Procedura che legge ciò che il Server ha da comunicare
 * firstTime viene settato a TRUE se il Server comunica al Client la frase di benvenuto perchè significa che la chat è appena cominciato od è ricominciata per volere del client
 * in questo modo è possibile rimodificare la casella del nome in caso l'utente decida di cambiarlo
 */
    private void getStream() {
        try {
            String temp = "";
            if (input.available() > 0) {
                while (input.available() > 0) {
                    temp += input.readUTF();
                }
                testo.append(temp);
                if (temp.contains("nome")) {
                    firstTime = true;
                }
            }
        } catch (Exception e) {//in caso di errore aggiorniamo lo stato
            testo.append("Impossibile comunicare con il server\n");
            stato.setText("Disconnesso\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chiudiConnessione = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nomeUtente = new javax.swing.JLabel();
        campoRisposta = new javax.swing.JTextField();
        invioRisposta = new javax.swing.JButton();
        dialogo = new javax.swing.JScrollPane();
        testo = new javax.swing.JTextArea();
        immagine = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        stato = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        chiudiConnessione.setText("Chiudi connessione");
        chiudiConnessione.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                chiudiConnessioneMousePressed(evt);
            }
        });
        chiudiConnessione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chiudiConnessioneActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Utente:");

        nomeUtente.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        nomeUtente.setText("Default");

        campoRisposta.setText("Default");
        campoRisposta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoRispostaActionPerformed(evt);
            }
        });
        campoRisposta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campoRispostaKeyPressed(evt);
            }
        });

        invioRisposta.setText("Invio");
        invioRisposta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                invioRispostaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                invioRispostaMouseReleased(evt);
            }
        });

        dialogo.setAutoscrolls(true);
        dialogo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dialogo.setEnabled(false);
        dialogo.setMaximumSize(new java.awt.Dimension(100, 100));

        testo.setEditable(false);
        dialogo.setViewportView(testo);

        jLabel2.setText("Stato:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dialogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoRisposta, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .addComponent(chiudiConnessione, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(invioRisposta, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(immagine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stato, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(253, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeUtente, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nomeUtente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(immagine, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoRisposta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(invioRisposta)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(stato, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)
                        .addComponent(chiudiConnessione))
                    .addComponent(dialogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chiudiConnessioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chiudiConnessioneActionPerformed

    }//GEN-LAST:event_chiudiConnessioneActionPerformed
/**
 * Alla pressione del tasto invio, la procedura invia al Server ciò che il Client deve comunicare
 */
    private void invioRispostaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invioRispostaMousePressed
        if (campoRisposta.getText().length() > 0) {
            try {
                out.writeUTF(campoRisposta.getText());
                out.flush();
                if (firstTime) {
                    nomeUtente.setText(campoRisposta.getText());
                    firstTime = false;
                }
                campoRisposta.setText("");
            } catch (IOException ex) { //in caso di errore aggiorniamo lo stato
                testo.append("Impossibile comunicare con il server\n");
                stato.setText("Disconnesso\n");
            }
        }
    }//GEN-LAST:event_invioRispostaMousePressed
/**
 * Si pensa che ad ogni premuta del tasto invio da parte del Client, il Server deve dare una risposta, quindi viene chiamata la procedura di competenza
 */
    private void invioRispostaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invioRispostaMouseReleased
        getStream();
    }//GEN-LAST:event_invioRispostaMouseReleased
/**
 * Procedura che comunica al Server che l'utente ha finito
 */
    private void chiudiConnessioneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chiudiConnessioneMousePressed
        try {
            s.close();
            input.close();
            out.close();
        } catch (Exception e) {
            testo.append("Impossibile comunicare con il server\n");
            stato.setText("Disconnesso\n");
        }
        System.exit(0);
    }//GEN-LAST:event_chiudiConnessioneMousePressed

    private void campoRispostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoRispostaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoRispostaActionPerformed

    private void campoRispostaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoRispostaKeyPressed

    }//GEN-LAST:event_campoRispostaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campoRisposta;
    private javax.swing.JButton chiudiConnessione;
    private javax.swing.JScrollPane dialogo;
    private javax.swing.JLabel immagine;
    private javax.swing.JButton invioRisposta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel nomeUtente;
    private javax.swing.JLabel stato;
    private javax.swing.JTextArea testo;
    // End of variables declaration//GEN-END:variables
}
